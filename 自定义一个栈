import java.util.Arrays;
import java.util.EmptyStackException;
import java.util.Scanner;

/*
        *自定义栈容器
*/
 public class MyStack<E> {
    private Object[] arr; //存放元素的物理结构
    private int stackLength = 4; //数组的默认长度
    private int size; //记录栈容器的元素个数
    private int index = -1; //操作数组下标位置的指针

    public boolean empty() {
        return this.size == 0;
    }

    public E pop() { //出栈
        if (this.index == -1) {
            throw new EmptyStackException();
        }
        this.size--; //记录元素个数
        return (E) this.arr[index--];
    }

    public E push(E item) { //入栈
        this.capacity();
        this.arr[++index] = item;
        this.size++;
        return item;
    }

    //数组初始化或者以1.5倍容量对数组扩容
    private void capacity() {
        //数据初始化
        if (this.arr == null) {
            this.arr = new Object[this.stackLength];
        }
        //以1.5倍对数组扩容
        if (this.size - (this.stackLength - 1) >= 0) {
            this.stackLength = this.stackLength + (this.stackLength >> 1);
            this.arr = Arrays.copyOf(this.arr, this.stackLength);
        }
    }

    public static void main(String[] args) {
        MyStack<String> myStack = new MyStack<>();
        Scanner in = new Scanner(System.in);
        System.out.println("请向该栈中添加元素！");
        myStack.push("a");
        myStack.push("b");
        myStack.push("c");
       System.out.println("存放在栈中的元素个数为："+myStack.size);
        while (!myStack.empty()){
            System.out.println(myStack.pop());
        }
    }
}
